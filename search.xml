<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git常用指令详细说明]]></title>
    <url>%2F2018%2F12%2F07%2FGit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[博主博客地址: http://blog.suhuashan.xin本文主要讲解git一些常用且实用的操作，方便进行github托管代码。 Git常用命令1.git init1git init //初始当前目录，生成.git文件夹 2.git status1git status //查看当前本地分支下有没有文件被修改或者有没有新增文件 3.git clone123git clone &lt;版本库的网址&gt; git clone &lt;版本库的网址&gt; &lt;本地目录名&gt; // 指定本地目录名git clone -o romoteBranchName &lt;版本库的网址&gt; //指定远程分支名称 clone 命令会创建指定本地目录名的文件夹把版本库的内容更新下来，默认创建本地分支 master 和远程分支 origin /master (这里的origin指的是远程主机名）并绑定；-o 可以指定远程分支名称；不指定本地目录名则创建与版本库目录名一样的目录。 4.git remote123456git remote //命令列出所有远程主机git remote -v //列出所有远程主机并展示远程主机的网址git remote show &lt;主机名&gt; //查看远程分支的详细状况git remote add &lt;主机名&gt; &lt;网址&gt; //添加远程主机名git remote rm &lt;主机名&gt; // 删除远程主机git remote rename &lt;原主机名&gt; &lt;新主机名&gt; // 修改远程主机名 默认远程主机名：origin 5.git branch123git branch //查看本地分支 现在所在的分支会有 * 号标注git branch -r //查看远程分支git branch -a //查看所有分支（本地+远程） 6.git checkout123git checkout 分支名 //切换到指定分支//指定本地分支切出新分支并切换。不指定分支时根据当前分支切新分支git checkout -b newBrach 生成本地新分支 本地和远程默认分支都是master 7.git merge123git checkout 分支名 //切换到指定分支//指定本地分支切出新分支并切换。不指定分支时根据当前分支切新分支git checkout -b newBrach 生成本地新分支 注意:git fetch后当前目录没有任何改变，需要git merge才会得到 可以近似认为：git fetch + git merge = git pull 8.git pull1234//把指定远程主机名远程分支的内容拉取到指定的本地分支git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;//把指定分支内容拉取到当前本地分支，相当于先 fetch 再 mergegit pull &lt;远程主机名&gt; &lt;远程分支名&gt; 注意：默认远程主机名：origin 如果需要自己添加远程主机名，请执行git remote命令 9.git push12345678//把指定本地分支的 commit 推到指定的远程主机远程分支上git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;//把本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。git push &lt;远程主机名&gt; &lt;远程分支名&gt; //删除指定的远程分支，等同于推送一个空的本地分支到远程分支git push &lt;远程主机名&gt;:&lt;远程分支名&gt;//指定默认主机，下次直接 git push 即可git push -u &lt;远程主机名&gt; &lt;本地分支名&gt; 如果执行git push相关命令后出现下面提示，意味着文件没改变。 参考文章地址： https://git-scm.com/book/zh/v1 http://www.ruanyifeng.com/blog/2014/06/git_remote.html https://blog.csdn.net/weixin_40811829/article/details/84798530]]></content>
      <categories>
        <category>git常用操作</category>
      </categories>
      <tags>
        <tag>git指令</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建博客最全配置]]></title>
    <url>%2F2018%2F09%2F21%2Fhexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%9C%80%E5%85%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[博主博客地址: http://blog.suhuashan.xin本文分为两大模块，第一模块是搭建博客，第二模块是博客主题进行配置，当然我选用的主题是Next。 一.博客搭建1.搭建 Node.js 环境为什么要搭建Node.js环境？ - 因为Hexo博客系统是基于Node.js编写的。 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。 在Node.js官网：https://nodejs.org/en/ 下载安装包，推荐下载官方推荐(Recommonded)的版本。 保持默认设置即可，一路Next，安装很快就结束了。 windows打开命令提示符，输入node -v、npm -v出现版本号则说明Node.js环境配置成功，第一步完成！！！ 2.搭建 Git 环境为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。 Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 在 Git 官网：https://git-scm.com/ 下载安装包，对准自己电脑的操作系统下载一个就可以了 桌面右键，打开 Git Bush Here，输入 git –version，出现版本号则说明 Git 环境配置成功，第二步完成！！！ 3.GitHub 注册和配置GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。 Github注册：https://github.com/ 注册或者登陆好之后就开始创建仓库。 创建仓库：Repository name 使用自己的用户名。注意：yourname 必须是你的用户名。1yourname/yourname.github.io 访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。 到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作。 4.安装配置 HexoHexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo 官方文档：https://hexo.io/zh-cn/ 使用 npm 安装 Hexo：在命令行中输入1npm install hexo-cli -g 注意：博主在安装这个包出现管理员权限问题，无法成功安装。于是按 win + x 打开 Window PowerShell,重新安装就可以了，如果安装过程出现WARN，不用担心，因为不会影响正常使用。 查看 Hexo 的版本1hexo version Hexo 安装成功后，在本地创建一个文件夹，文件夹名随意（我命名为blog)，然后鼠标右击该文件夹，按顺序执行下面的命令。123hexo initnpm install 新建完成后，指定文件夹的目录如下：1234567891011.├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json #npm 依赖等 运行本地 Hexo 服务123hexo server或者hexo s 您的网站会在 http://localhost:4000 下启动。如果 http://localhost:4000 能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。 注意1：执行hexo server提示找不到该指令 解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：123sudo npm install hexo-server或者npm install hexo -server --save 5.关联 Hexo 与 GitHub Pages在前面创建的文件夹里面鼠标右键，点击1Git Base Here 将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）12git -config --global user.name "your github name"git -config --global user.email "your email" 接着输入1ssh-keygen -t rsa -C "your email" 连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh或者C:\Users\具体用户.ssh）。 登录 Github，点击头像下的 settings，添加 ssh点击 SSH and GPG keys新建一个new ssh key，将id_rsa.pub文件里的内容复制上去 配置 Deployment 在文件夹的根目录找到_config.yml文件，打开该文件找到Deployment，然后按照如下修改，用户名改成你的信息(需要注意的是：冒号后面记得空一格！)123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:yourname(github的用户名)/yourname.github.io.git branch: master 本地文件提交到 GitHub Pages123456789101112// 删除旧的 public 文件hexo clean// 生成新的 public 文件hexo generate或者hexo g// 开始部署hexo deploye或者hexo d 在浏览器中输入 https://yourname(github的用户名).github.io，你会发现和在本地看到一模一样。 这样，本地 git 项目与远程的 github 建立联系。 6.发表新文章1hexo new "文章标题" //在本地文件夹根目录下输入该命令 在本地博客文件夹 source_posts 文件夹下看到我们新建的 markdown 文件。 当然，我们也可以手动添加Markdown文件在source/post文件夹下，其效果同样可以媲美hexo new指令 文章编辑好之后，运行生成、部署命令： 12345hexo cleanhexo ghexo d 参考链接：https://oakland.github.io/2016/05/02/hexo-%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84post/ 7.GitHub Pages 地址解析到个人域名在 GitHub 仓库的根目录下建立一个 CNAME 的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http://1blog.suhuashan.xin 注意：CNAME 一定是在你 Github 项目的 master 根目录下 进入阿里云域名解析地址，添加解析：12345678910记录类型选择CNAME主机记录填blog //当然填写www也可以，自拟一个吧解析线路选择默认记录值填yourname.github.ioTTL值为10分钟再添加一个解析，记录类型A主机记录填www解析线路选择默认记录值填你GitHub 的ip地址（在cmd中ping：）ping suhuashan.github.io 保存，等待一下访问suhuashan.github.io，域名会重定向为blog.suhuashan.xin 注意：CNAME文件在下次 hexo deploy的时候就消失了，需要重新创建，这样就很繁琐 方法一：每次 hexo d 之后，就去 GitHub 仓库根目录新建 CNAME文件 方法二：在 hexo g 之后， hexo d 之前，把CNAME文件复制到 “\public\” 目录下面，里面写入你要绑定的域名。 二.Hexo的Next主题详细配置这一块我就不多说了，毕竟网上已经有很完美的教程。但是我会提出教程几个讲的比较模糊的地方，然后对不清晰的地方重新配置。 Next 官方文档：http://theme-next.iissnan.com/教程参考(我对网上大部分进行筛选，个人觉得以下这两个比较管用)：https://www.jianshu.com/p/3a05351a37dchttps://zhuanlan.zhihu.com/p/28128674 教程里面需要修改的地方： 1.添加分类模块新建一个分类页面1hexo new page categories 这时候，source文件夹下有了categorcies/index.md，最关键就是要设置type123title: 分类date: 2018-09-20 23:27:47 //按照自己的时间就可以了type: "categories" 打开 主题配置文件 找到menu，将categorcies取消注释 以后写博客直接在文章的 title 下面加上 categorcies 就可以了，例如：123title: 分类测试文章标题categorcies: 测试 //一个类别的情况categorcies: [测试, 验证] //多个类别的情况写成数组 2.添加标签模块新建一个标签页面1hexo new page tags 这时候，source文件夹下有了tags/index.md，最关键就是要设置type123title: 分类date: 2018-09-20 23:27:47 //按照自己的时间就可以了type: "tags" 打开 主题配置文件 找到menu，将tags取消注释 以后写博客直接在文章的 title 下面加上 tags 就可以了，例如：123title: 标签测试文章标题tags: 测试 //一个类别的情况tags: [测试, 验证] //多个类别的情况写成数组 其他配置就按照教程就可以了！]]></content>
      <categories>
        <category>博客搭建教程</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
